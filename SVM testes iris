# Importando as bibliotecas necessárias
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

# Carregar o dataset Iris
iris = datasets.load_iris()
X = iris.data[:, :2]  # Usando apenas as duas primeiras características para visualização
y = iris.target

# Dividir o dataset em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Lista de kernels a serem testados
kernels = ['linear', 'poly', 'rbf']

for kernel in kernels:
    print(f"=== Kernel: {kernel} ===")

    # Criar e treinar o modelo SVM com o kernel escolhido
    svm = SVC(kernel=kernel, gamma=0.6609, C=0.1550)
    svm.fit(X_train, y_train)

    # Fazer previsões
    y_pred = svm.predict(X_test)
    # Avaliar o modelo
    print("Matriz de Confusão:")
    print(confusion_matrix(y_test, y_pred))
    print("\nRelatório de Classificação:")
    print(classification_report(y_test, y_pred))

    # Função para plotar a fronteira de decisão
    def plot_decision_boundary(X, y, model, kernel_type):
        h = .02  # Passo na malha
        x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
        y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
        xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

        Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)

        plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
        plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
        plt.xlabel(iris.feature_names[0])
        plt.ylabel(iris.feature_names[1])
        plt.title(f'Fronteira de Decisão SVM - Kernel: {kernel_type}')
        plt.show()

    # Plotar a fronteira de decisão
    plot_decision_boundary(X_test, y_test, svm, kernel)

